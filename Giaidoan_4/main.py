
from Pinecone_API import PineconeClient
from Neo4j_API import Neo4j_API
from pymining import seqmining
from collections import Counter, defaultdict
import numpy as np
from sklearn.metrics import precision_score, recall_score
import matplotlib.pyplot as plt
import pandas as pd


TOP_2279_USERS = ["U_1000454","U_1002784","U_100281","U_10033817","U_1004646","U_1004659","U_1004662","U_1004670","U_1004954","U_1005254","U_1005500","U_1005547","U_10057731","U_1006254","U_10068981","U_10071644","U_10073375","U_10073419","U_1008050","U_100838","U_1008630","U_1008642","U_1008653","U_1009014","U_1009173","U_1009248","U_1009297","U_1009481","U_1009492","U_10099726","U_10100704","U_10118346","U_10120674","U_10131497","U_10137429","U_10137468","U_10137498","U_10137508","U_10137510","U_10138438","U_10138447","U_10138534","U_10167679","U_10170061","U_10170744","U_10171580","U_10172329","U_10174787","U_10177493","U_10178602","U_10178776","U_10181205","U_10184073","U_10187253","U_10187261","U_10187267","U_1019204","U_10192575","U_10192740","U_10192777","U_10192803","U_10192807","U_10192860","U_10192955","U_10193096","U_10193468","U_10193912","U_10193984","U_10194022","U_10194154","U_10195298","U_10196965","U_10197188","U_10197595","U_10198695","U_10199145","U_1020100","U_1020293","U_10206998","U_10212422","U_1021609","U_1021628","U_10222631","U_10222675","U_10225349","U_1022796","U_1022802","U_10231045","U_10231066","U_10231197","U_10233511","U_10233820","U_10236096","U_10236115","U_10236118","U_10236121","U_10236139","U_10236159","U_10236166","U_10236177","U_10236189","U_10236760","U_10236884","U_10237364","U_10238012","U_1023803","U_10238251","U_10239766","U_10244776","U_10244788","U_10244803","U_10244809","U_10244811","U_10244818","U_10244843","U_10244868","U_10244931","U_10246891","U_10246958","U_10246968","U_10246975","U_10247830","U_10248516","U_10248791","U_10249738","U_10255613","U_10261427","U_10261732","U_10261745","U_10261942","U_10262024","U_10270409","U_10270623","U_10272961","U_10273115","U_1027395","U_10275637","U_10275639","U_10275641","U_10275642","U_10275648","U_10275656","U_10275659","U_10275663","U_10275672","U_10275680","U_10275685","U_1028905","U_10290533","U_10290902","U_10290952","U_10291424","U_10291671","U_10291924","U_10292278","U_10292660","U_10304917","U_10305912","U_10306796","U_10322002","U_10322104","U_10323283","U_10323288","U_10323297","U_10323300","U_10323827","U_10324469","U_10332056","U_10332094","U_10332196","U_10334698","U_10336242","U_10337833","U_10339718","U_10340035","U_10340036","U_10340055","U_10340063","U_10340066","U_10340068","U_10340070","U_10340072","U_10340197","U_10340300","U_10340976","U_10341098","U_10342903","U_10344642","U_1035241","U_1035442","U_1035503","U_10366224","U_10367785","U_10368869","U_10372557","U_10373715","U_10373741","U_10373961","U_10374751","U_10375158","U_10375411","U_10376091","U_10376238","U_10377540","U_10378138","U_10378223","U_10378949","U_1037951","U_1037972","U_1038004","U_1038012","U_1038027","U_10380702","U_10384686","U_10384809","U_10385004","U_10385073","U_10385115","U_10396024","U_10398144","U_1040210","U_10404797","U_10407886","U_10407896","U_10407952","U_10407957","U_10407965","U_10407973","U_10407975","U_10407981","U_10410201","U_10410757","U_10412025","U_10413404","U_10415074","U_1041610","U_10427899","U_10428064","U_10428152","U_10428262","U_10429770","U_104298","U_10431983","U_10432024","U_10432027","U_10432064","U_10432522","U_10432611","U_10432617","U_10432684","U_10438579","U_10443432","U_10443731","U_1044548","U_104510","U_10457595","U_10458111","U_10463832","U_10464054","U_10464173","U_10464381","U_10469551","U_10473180","U_10478128","U_10478734","U_1048209","U_1048281","U_10486110","U_10486120","U_10490472","U_10491711","U_10497009","U_10498485","U_1051388","U_10514083","U_10514259","U_10514722","U_10514811","U_10517395","U_1051759","U_10518146","U_10518425","U_10520884","U_1052163","U_1052224","U_10522378","U_10526479","U_10526632","U_10526749","U_10526751","U_10526868","U_10526934","U_10527036","U_10527104","U_10527134","U_10527135","U_10527690","U_10529396","U_10530254","U_10530420","U_10531125","U_10531154","U_10531886","U_10531907","U_10532181","U_10535500","U_10535514","U_10537","U_10539576","U_1054076","U_105415","U_1054206","U_1054391","U_10545362","U_10547263","U_1054982","U_1055187","U_10552007","U_10553181","U_10562312","U_10562457","U_10562473","U_10565216","U_1057909","U_1058178","U_1058268","U_1058297","U_1058314","U_10587230","U_1059566","U_1059958","U_10600026","U_106058","U_106080","U_10611751","U_1061752","U_10621634","U_106225","U_10625987","U_10626120","U_10626436","U_10626483","U_10626618","U_10627379","U_10628582","U_106313","U_10636020","U_10637344","U_1063765","U_10639054","U_10645870","U_10647059","U_10651937","U_1065203","U_10653418","U_10656413","U_10660153","U_10663392","U_10663468","U_10665797","U_1066781","U_106693","U_10671623","U_10672252","U_10672285","U_10672297","U_10672318","U_10677790","U_1068790","U_1068794","U_10688277","U_10690103","U_10690541","U_10690581","U_10690669","U_10690695","U_1069156","U_10697727","U_1070216","U_10704994","U_10705991","U_10711042","U_10711153","U_10712750","U_1071292","U_1071338","U_1071340","U_10714623","U_1071630","U_1071709","U_107183","U_1072221","U_1072480","U_10728322","U_10728811","U_1072882","U_10729055","U_10731184","U_10732046","U_10733238","U_107350","U_10735264","U_10735867","U_10741322","U_10743320","U_10748230","U_1074879","U_1075046","U_1075388","U_1075505","U_10755274","U_1076300","U_1076316","U_1076362","U_1076376","U_10782647","U_10783931","U_107862","U_1079596","U_1079700","U_10798135","U_10798153","U_1079899","U_10799640","U_10800107","U_10804283","U_1080502","U_10806229","U_1081868","U_10820919","U_10821606","U_10823531","U_10823761","U_10824236","U_1084133","U_10841833","U_108432","U_10844833","U_10845663","U_10847071","U_108477","U_1085160","U_1085185","U_1085304","U_1085517","U_10855248","U_10855381","U_10855645","U_10855774","U_10856187","U_1085650","U_1085788","U_10864115","U_10872269","U_10874571","U_10875176","U_10875178","U_10876187","U_108784","U_10880276","U_108838","U_1088453","U_108895","U_10890058","U_10891990","U_10893103","U_10895256","U_10898833","U_10898900","U_10899019","U_10904250","U_10905894","U_10906206","U_10906301","U_10906331","U_10907165","U_1090745","U_10907722","U_10907904","U_10909159","U_10909168","U_10910435","U_10910612","U_10910633","U_10910775","U_10910930","U_10910982","U_10911146","U_109113","U_10911367","U_10911459","U_10911796","U_10912643","U_10912783","U_10913467","U_10913905","U_10914363","U_10914369","U_10915599","U_10915663","U_10915668","U_10915682","U_10918368","U_1091917","U_10921950","U_10923875","U_10924400","U_10925920","U_10926419","U_10927393","U_10927456","U_1092786","U_10931911","U_10935083","U_10935606","U_10936717","U_10938306","U_10938312","U_10938899","U_10941133","U_10941492","U_10943976","U_10945560","U_10945581","U_10946048","U_10949827","U_10949828","U_10949850","U_10949860","U_10949874","U_10949895","U_10949913","U_10949950","U_10949982","U_10950082","U_1095013","U_10950195","U_10950223","U_10950762","U_10950793","U_10950817","U_10953321","U_10953367","U_10953388","U_10953397","U_10953403","U_10953409","U_10953445","U_10954623","U_10956553","U_10957133","U_10966924","U_10983402","U_1099217","U_11002114","U_11002529","U_11003430","U_11004488","U_11004618","U_11005981","U_11008321","U_11008655","U_11008659","U_11009595","U_1100966","U_11010920","U_11011994","U_11014642","U_11014783","U_11015452","U_1101789","U_11019046","U_11019334","U_11021064","U_11024683","U_11025829","U_11027309","U_11031292","U_11031824","U_11031905","U_11032463","U_11032712","U_11040941","U_11043345","U_11044591","U_11044596","U_11044625","U_11044637","U_11044687","U_11044731","U_11044779","U_11044810","U_11044939","U_11047870","U_11048950","U_11052452","U_11053090","U_11053292","U_11053311","U_11053383","U_11053741","U_11054511","U_11054516","U_11054530","U_11054561","U_11054565","U_11054577","U_11054717","U_11055210","U_11055278","U_11055284","U_11055307","U_11055321","U_11056022","U_11056175","U_11056188","U_11056201","U_11056210","U_11056227","U_11056245","U_11056261","U_11056271","U_11056282","U_11056289","U_11056298","U_11056300","U_11056317","U_11056322","U_11056324","U_11056327","U_11056328","U_11056332","U_11056335","U_11056341","U_11056342","U_11056356","U_11056400","U_11057543","U_11058396","U_11061031","U_11061155","U_11061271","U_11063253","U_11063477","U_11063478","U_11063493","U_11063541","U_11063548","U_11063596","U_11063661","U_11064310","U_11064745","U_11064755","U_11064791","U_11064797","U_11064802","U_11064818","U_11064820","U_11064824","U_11064829","U_11064831","U_11064845","U_11064850","U_11064859","U_11064862","U_11064864","U_11064871","U_11064876","U_11064893","U_11064899","U_11064951","U_11065102","U_11065176","U_11066765","U_11066775","U_11067377","U_11067787","U_11070235","U_11072134","U_1107346","U_11073552","U_11074826","U_11075026","U_11076104","U_11076105","U_11077214","U_11077223","U_11077263","U_11077303","U_11077351","U_11077410","U_11077454","U_11077460","U_11079045","U_11079105","U_11079627","U_11080451","U_11080567","U_11080597","U_11080690","U_11080774","U_11080788","U_11080894","U_11080915","U_11080917","U_11080918","U_11080921","U_11080923","U_11080930","U_11080940","U_11080945","U_11080952","U_11080957","U_11080959","U_11080966","U_11080972","U_11080977","U_11081002","U_11081009","U_11081012","U_11081025","U_11081072","U_11081073","U_11081091","U_11081209","U_11081318","U_11081327","U_11081331","U_11081349","U_11081361","U_11081456","U_11081471","U_11081618","U_11081920","U_11082874","U_11084361","U_11085125","U_11085656","U_11085669","U_11085708","U_11086460","U_11087248","U_1108869","U_11088910","U_11089225","U_11089261","U_11090573","U_11091138","U_11091611","U_11092599","U_11098817","U_1110001","U_11109001","U_11111466","U_111154","U_11116819","U_1111795","U_111190","U_11126288","U_11128115","U_1112856","U_11129121","U_11129503","U_11129661","U_11129663","U_11129706","U_11138772","U_11138888","U_11138929","U_11138942","U_11138946","U_11138964","U_11139248","U_11140365","U_11143113","U_11143441","U_1114422","U_11145020","U_11145070","U_11148319","U_11149269","U_11150532","U_11150575","U_11151242","U_11155842","U_11158208","U_11162092","U_11163109","U_11163945","U_11164793","U_11172334","U_11172617","U_11174861","U_11175470","U_11175493","U_11175518","U_11175525","U_11175531","U_11175592","U_11175607","U_11175682","U_11175944","U_11176372","U_11178018","U_11179691","U_11179957","U_11181595","U_11181680","U_11181706","U_11183812","U_11186871","U_1120098","U_11223397","U_11245634","U_11246178","U_1124686","U_11247244","U_11247545","U_112504","U_11252772","U_11253016","U_11254664","U_11256923","U_11257099","U_11257998","U_11258273","U_11258473","U_11259106","U_11261006","U_11261091","U_11261103","U_11261214","U_11267435","U_11267508","U_11267649","U_11267726","U_1126955","U_11271718","U_11271732","U_11272379","U_11272745","U_11272814","U_11282684","U_11283633","U_11283652","U_11286421","U_11288748","U_1129288","U_11309006","U_11317861","U_11319946","U_1131995","U_11321207","U_11321435","U_11322193","U_11323082","U_11323112","U_11323130","U_11323139","U_11323995","U_11324363","U_11324475","U_11325953","U_1132634","U_1132636","U_1132639","U_1132642","U_1132644","U_1132645","U_1132660","U_1132673","U_1132711","U_1132752","U_1132781","U_11328349","U_1132840","U_1132860","U_11328836","U_1132890","U_1132895","U_11329003","U_1132908","U_1132909","U_1132918","U_1132940","U_1132947","U_11330790","U_1133380","U_1133416","U_1133432","U_11335294","U_11346880","U_11346906","U_11347708","U_11348335","U_1135008","U_11351050","U_11352961","U_11354846","U_11359056","U_11359140","U_1136188","U_11365469","U_11369977","U_11372084","U_11372196","U_11372242","U_11372243","U_11372244","U_11372318","U_11372477","U_11373222","U_11375169","U_11377203","U_11377524","U_11377530","U_11377553","U_11377569","U_11377590","U_11377652","U_11377716","U_11377760","U_11377836","U_11378320","U_11378348","U_11378420","U_11378451","U_11378461","U_11378491","U_11378506","U_11378509","U_11378523","U_11378525","U_11378573","U_11378586","U_11378589","U_11378617","U_11378630","U_11378650","U_11378690","U_11378742","U_11378853","U_11379318","U_11379734","U_11383857","U_1138658","U_11390514","U_11393566","U_11395085","U_11396374","U_11400821","U_11400950","U_11400958","U_11400974","U_11401044","U_11401048","U_11401161","U_11401723","U_11402896","U_11403226","U_11411229","U_11411450","U_11412608","U_1141574","U_1141591","U_1141874","U_1141977","U_11424129","U_11424160","U_11424977","U_11426673","U_11427257","U_11427594","U_11429095","U_1142999","U_11430420","U_11430422","U_11430431","U_11430441","U_11430448","U_11430455","U_11430472","U_11430475","U_11430486","U_11430490","U_11430949","U_11434056","U_1143867","U_11440256","U_11440266","U_11440272","U_11440275","U_11440279","U_11440284","U_11440289","U_11440291","U_11440292","U_11440298","U_11440305","U_11440314","U_11440327","U_11440331","U_11440341","U_11440342","U_11440344","U_11440364","U_1144393","U_11447524","U_114483","U_11449005","U_1145506","U_11462208","U_11469504","U_11474227","U_11474608","U_11476885","U_11480161","U_11480411","U_11481163","U_11483089","U_11484070","U_1149122","U_11492283","U_11492542","U_11496019","U_11497609","U_11497652","U_11497675","U_11497737","U_11502422","U_11502822","U_11504112","U_11504122","U_11504137","U_11504148","U_11504161","U_11504162","U_11504179","U_11504208","U_11504216","U_11504226","U_11504244","U_11504322","U_11504368","U_11504422","U_11504462","U_11504615","U_11504797","U_11504911","U_11504927","U_11505191","U_11505358","U_11505381","U_11506325","U_11509630","U_11510036","U_11510634","U_11516108","U_11517550","U_11517551","U_11517556","U_11517567","U_11517578","U_11517583","U_11517586","U_11517596","U_11517631","U_11517637","U_11517667","U_11517703","U_11517840","U_11517859","U_11517901","U_11518264","U_11521546","U_11523321","U_11525406","U_115290","U_11530725","U_11534069","U_11534180","U_11534577","U_11534582","U_11534596","U_11534643","U_11534907","U_11535285","U_11537564","U_11538570","U_115394","U_11540734","U_11543328","U_11543673","U_11543894","U_11543899","U_11543910","U_11543917","U_11543959","U_11543983","U_11544070","U_11544128","U_11544152","U_11544171","U_11544216","U_11545840","U_11545883","U_11545903","U_11545934","U_11545965","U_11546018","U_11546025","U_11546031","U_11546163","U_11546397","U_11546628","U_1154916","U_11550807","U_11553580","U_11554146","U_11555020","U_11555648","U_11558143","U_11561224","U_11563797","U_11564109","U_11565313","U_11565560","U_11567772","U_11588512","U_11590170","U_11600238","U_11600468","U_11603751","U_11605619","U_11609642","U_11611615","U_11611921","U_11614470","U_11615538","U_1161910","U_11620814","U_11621805","U_11635436","U_11636514","U_11636582","U_11636583","U_11636587","U_11636590","U_11636600","U_11636617","U_11636623","U_11636626","U_11636631","U_11636633","U_11636637","U_11636642","U_11636645","U_11636647","U_11636653","U_11636658","U_11636680","U_11636686","U_11636733","U_11636914","U_1164102","U_11642271","U_11642273","U_11642954","U_11643158","U_11645455","U_11648925","U_11650103","U_11650144","U_11650149","U_11650170","U_11650239","U_11650472","U_11650601","U_11658474","U_11679983","U_11683891","U_11687862","U_11689797","U_11691039","U_11691102","U_11692621","U_11694211","U_11695287","U_1169684","U_11698545","U_11700367","U_11700724","U_11700732","U_11700736","U_11700737","U_11700741","U_11700744","U_11700745","U_11700749","U_11700750","U_11700751","U_11700762","U_11700764","U_11700767","U_11700771","U_11700773","U_11700776","U_11700778","U_11700780","U_11700785","U_11700786","U_11700790","U_11700796","U_11700798","U_11700845","U_11700919","U_11700977","U_11702201","U_11702553","U_11706139","U_11706797","U_11706812","U_11706817","U_11706844","U_11706874","U_11709142","U_11709246","U_11709487","U_11710786","U_11712200","U_11713095","U_11713757","U_11714242","U_11714763","U_1172057","U_1172355","U_11726","U_11737395","U_11739206","U_1174008","U_11750716","U_11751642","U_11752478","U_11754123","U_11754374","U_11755476","U_11756878","U_11756991","U_11757226","U_11757437","U_11762202","U_11762797","U_11763158","U_11765254","U_11766206","U_11766832","U_11768","U_11771386","U_11771422","U_11771445","U_11771453","U_11773012","U_11773014","U_11773015","U_11773016","U_11773017","U_11773018","U_11773019","U_11773021","U_11773022","U_11773023","U_11773026","U_11773027","U_11773039","U_11773041","U_11773042","U_11773045","U_11773050","U_11773055","U_11773065","U_11773074","U_11773077","U_11773081","U_11773083","U_11773085","U_11773089","U_11773090","U_11773091","U_11773094","U_1177348","U_11776074","U_11785828","U_11786352","U_11787989","U_11796927","U_1179731","U_1179737","U_11799856","U_11799861","U_11799863","U_11799869","U_11799871","U_11799872","U_11799876","U_11799880","U_11799882","U_11799885","U_11799887","U_11799888","U_11799895","U_11799896","U_11799901","U_11799905","U_11799909","U_11799910","U_11799913","U_11799914","U_11799923","U_11799944","U_11799949","U_11799955","U_11799958","U_11799965","U_11799966","U_11799974","U_11799988","U_11800895","U_11808532","U_11810580","U_11811688","U_1181512","U_11818315","U_11818909","U_11820271","U_11822550","U_11822552","U_11822580","U_11822624","U_11822628","U_11822636","U_11822660","U_11822662","U_11822672","U_11822682","U_11822688","U_11822693","U_11822697","U_11822706","U_11822708","U_11822710","U_11822713","U_11822723","U_11822725","U_11822727","U_11822729","U_11822730","U_11822739","U_11822740","U_11822747","U_11822750","U_11822754","U_11822759","U_11822762","U_11822789","U_11822800","U_11822810","U_11822815","U_11822823","U_11822831","U_11822843","U_11822864","U_11822866","U_11822872","U_11822877","U_11822894","U_11822908","U_11822969","U_11823012","U_11823112","U_118232","U_11823265","U_11826983","U_11828845","U_11828875","U_11828974","U_11829887","U_11829908","U_11829909","U_1183717","U_11838875","U_11842441","U_11842661","U_11847100","U_11847145","U_11847208","U_11847213","U_11847368","U_11853091","U_11856033","U_1185608","U_1185630","U_11856896","U_11857097","U_11857204","U_11859619","U_11860432","U_11861060","U_11881644","U_11885393","U_11886092","U_11886311","U_11886355","U_11887847","U_11890549","U_11890950","U_11895567","U_11898368","U_11902234","U_11905184","U_11905199","U_11909745","U_11910013","U_11910132","U_1192259","U_11925202","U_11930271","U_11930272","U_11930297","U_11930316","U_11930318","U_11930543","U_11930572","U_11930582","U_11930588","U_11930591","U_11930686","U_11931509","U_11935052","U_11937675","U_11938296","U_11939647","U_11939687","U_11942802","U_11942911","U_119430","U_11943015","U_11943050","U_11943102","U_11943105","U_11943399","U_11943777","U_11944635","U_11944916","U_11945997","U_11946015","U_11946025","U_11946050","U_11946080","U_11946116","U_11946132","U_11946147","U_11946168","U_11946197","U_11946248","U_11946280","U_11946356","U_11946423","U_11946580","U_11946729","U_119472","U_11947371","U_11947472","U_11947679","U_11947917","U_11948136","U_11948210","U_11949070","U_11951154","U_1195265","U_11952793","U_11953627","U_11955023","U_11955033","U_11955047","U_11955059","U_11955062","U_11955069","U_11955079","U_11955094","U_11955097","U_11955152","U_11955183","U_11955200","U_11955249","U_11955346","U_11955738","U_11959156","U_11959158","U_11959429","U_11960960","U_11964838","U_11964932","U_11965036","U_11965122","U_11965336","U_11965624","U_11965839","U_11965973","U_11965991","U_11967708","U_11967829","U_119687","U_11969932","U_11970321","U_11970773","U_119712","U_11971201","U_11971248","U_11971637","U_11974506","U_11975123","U_11975963","U_11977654","U_11980682","U_11982927","U_11983534","U_11983558","U_11983913","U_11985150","U_11985198","U_11985240","U_11985245","U_11990252","U_11990430","U_11990442","U_11990460","U_11990552","U_11990632","U_11990633","U_11990644","U_11990787","U_11990791","U_11990859","U_11990900","U_11991043","U_11991046","U_11991072","U_11991130","U_11991131","U_11991138","U_11991186","U_11991248","U_11991279","U_11991321","U_11991338","U_11991555","U_11991588","U_11991743","U_12000614","U_12000677","U_1200312","U_12006480","U_1201592","U_12019821","U_12019836","U_12019862","U_12019887","U_12019904","U_12019914","U_12019920","U_1202008","U_1202100","U_1202129","U_12023358","U_1202446","U_12025164","U_12025178","U_12027555","U_12028592","U_12029629","U_12030395","U_12036706","U_12036969","U_12037627","U_12043146","U_12043391","U_12043744","U_12043754","U_12043766","U_12044552","U_1204569","U_1204576","U_1204595","U_1204642","U_12046483","U_12046490","U_12046494","U_12046617","U_12046770","U_12046805","U_12046838","U_12046972","U_12047004","U_1204718","U_12049450","U_12049932","U_12051108","U_12055408","U_12060261","U_12060362","U_12061291","U_12061639","U_12062668","U_12063448","U_12064008","U_12064627","U_12064674","U_12064713","U_12064758","U_12065282","U_1206565","U_12065669","U_12066268","U_12066314","U_12066603","U_12067414","U_1206984","U_12070127","U_1207274","U_12074525","U_12074691","U_12075977","U_12076274","U_12076277","U_12076284","U_12076285","U_12076291","U_12076296","U_12076300","U_12076306","U_12076311","U_12076317","U_12076319","U_12076324","U_12076335","U_12076345","U_12076347","U_12076351","U_12076381","U_12076424","U_12076439","U_12076448","U_12077416","U_12077695","U_12085534","U_12087281","U_12089024","U_12089658","U_12098408","U_12099390","U_12099510","U_12101837","U_12101856","U_12101919","U_12102208","U_12103421","U_12107578","U_1212113","U_1213032","U_1213105","U_12133570","U_12134213","U_12134356","U_12135080","U_12140937","U_12143018","U_1214447","U_12149873","U_12150310","U_1215340","U_12156103","U_12156107","U_12156121","U_1215613","U_12156144","U_12156146","U_12156173","U_12156176","U_12156186","U_12156192","U_12156195","U_12156211","U_12156229","U_12156258","U_12156274","U_12156290","U_12156301","U_12156311","U_12156324","U_12156329","U_12156333","U_12156344","U_12156364","U_12156372","U_12156387","U_12156394","U_12156416","U_12156473","U_12156483","U_12156509","U_12156995","U_12159384","U_12165026","U_12167281","U_12167282","U_12167283","U_12167289","U_12167290","U_12167296","U_12167302","U_12167306","U_12167307","U_12167329","U_12167333","U_12167352","U_12167360","U_12167362","U_12173511","U_12174127","U_12174128","U_12174130","U_12174165","U_12174172","U_12174200","U_12174230","U_12174265","U_12177182","U_12180716","U_12181411","U_12181522","U_12181531","U_12181537","U_12181543","U_12181559","U_12181560","U_12181580","U_12181646","U_12181932","U_12183389","U_12185419","U_1218647","U_12186491","U_12186618","U_12186634","U_12188667","U_12189963","U_12194956","U_12195959","U_12196028","U_12196150","U_12196297","U_12196450","U_12198771","U_12198896","U_12202239","U_12202422","U_12203004","U_1220444","U_12206080","U_12206299","U_12209559","U_12210102","U_12217111","U_12218036","U_12218343","U_12221947","U_12227432","U_12227435","U_12227437","U_12227449","U_12227471","U_12227477","U_12227493","U_12227514","U_12227546","U_12228815","U_12228818","U_12228839","U_12230741","U_1223257","U_12234640","U_12234656","U_12234787","U_12235570","U_12235576","U_12235607","U_12235631","U_12239700","U_12239916","U_12239967","U_12241230","U_12241322","U_12241327","U_12241329","U_12241350","U_12241406","U_12241420","U_12241536","U_12241598","U_12242069","U_12255082","U_12255597","U_12278376","U_12282443","U_12284222","U_12284226","U_12284303","U_12284355","U_12284360","U_12284439","U_12284608","U_12286296","U_12287924","U_12288800","U_12292641","U_12295781","U_1229828","U_1229829","U_12302238","U_12304932","U_12305333","U_12305811","U_12305864","U_12305884","U_12305896","U_12305980","U_12307953","U_12307991","U_12307994","U_12308009","U_12308023","U_12308035","U_12308048","U_12308084","U_12309729","U_12312328","U_12313047","U_12313209","U_12316523","U_12316919","U_12317879","U_12318314","U_12318794","U_12319193","U_12319201","U_12319253","U_12319288","U_12319319","U_12319388","U_12319403","U_12319456","U_12319511","U_12319783","U_12320179","U_12320363","U_12324317","U_12325896","U_12325939","U_12325966","U_12326198","U_12328660","U_12328689","U_12335009","U_12339758","U_12340600","U_12340606","U_12340638","U_12340661","U_12340682","U_12340873","U_12341379","U_12341592","U_12342078","U_12342666","U_12344723","U_12348686","U_1235074","U_12351046","U_12351171","U_12352757","U_12356173","U_12359166","U_12359563","U_12360180","U_12360184","U_12360185","U_12360212","U_12360237","U_12360286","U_12363504","U_12363542","U_12363578","U_12364325","U_12364327","U_12364351","U_12364355","U_12364369","U_12364376","U_12364379","U_12364412","U_12364418","U_12364989","U_12365144","U_12365661","U_12366599","U_12368406","U_12368553","U_12372509","U_12372839","U_12372892","U_12375106","U_12376256","U_12376471","U_12376768","U_12380299","U_12380304","U_12380330","U_12380348","U_12380353","U_12380369","U_12380371","U_12380377","U_12380749","U_12380879","U_12383249","U_12383297","U_12383927","U_12384750","U_12384815","U_12385201","U_12386781","U_12387112","U_12390433","U_12390508","U_12390551","U_12390574","U_12390583","U_12390586","U_12391015","U_12391161","U_12393161","U_12393196","U_12395840","U_12395851","U_12396127","U_12396136","U_12396154","U_12396188","U_12396190","U_12396197","U_12396212","U_12396262","U_1239919","U_12405028","U_12405072","U_12407072","U_12408006","U_12408015","U_12408016","U_12408069","U_12408107","U_12408116","U_12408131","U_12408136","U_12408159","U_12408184","U_12408191","U_12408298","U_12408314","U_12408331","U_12408360","U_12408399","U_12408426","U_12408512","U_12408608","U_12408715","U_12408732","U_12408763","U_12408838","U_12408882","U_12409429","U_12410385","U_12410798","U_12414480","U_12416288","U_12416326","U_12416383","U_12416436","U_12418485","U_12418586","U_12419125","U_12420004","U_12424206","U_12425786","U_12425802","U_12425861","U_12426010","U_12427560","U_12429349","U_12429365","U_12429369","U_12429702","U_12436146","U_12440493","U_12440779","U_12447537","U_12447551","U_12451217","U_12451353","U_12451411","U_12456933","U_12457550","U_12459137","U_12460192","U_12460628","U_12460968","U_12461018","U_12461867","U_12461912","U_12462267","U_12462679","U_12462692","U_12463270","U_12464036","U_12464250","U_12465115","U_12465227","U_12465243","U_12466115","U_12467095","U_12468254","U_12469166","U_12469181","U_12475346","U_12476731","U_12479007","U_12497294","U_12497499","U_12497568","U_1250108","U_1250156","U_12504081","U_12506185","U_1250789","U_1251082","U_12512028","U_12514131","U_12517607","U_12519515","U_12520001","U_12520297","U_12520522","U_12522543","U_12522578","U_12522725","U_12522807","U_12523312","U_12527159","U_12528912","U_12531870","U_12532188","U_12540221","U_12540766","U_12541875","U_12542186","U_12543978","U_12545127","U_12545155","U_12545177","U_12545218","U_12545240","U_12545298","U_12545301","U_12545379","U_12545471","U_12552197","U_12566364","U_12566784","U_12567817","U_12569271","U_12569881","U_12570356","U_12572192","U_12572423","U_12573757","U_12573919","U_12573923","U_12574025","U_12574504","U_12574708","U_12575310","U_12575311","U_12575585","U_12575695","U_12575813","U_12575836","U_12575904","U_12575930","U_12576726","U_12577001","U_12577185","U_12577495","U_12580657","U_12580684","U_12580689","U_12580697","U_12580715","U_12580720","U_12581012","U_12581930","U_12582130","U_12583540","U_12584576","U_12584682","U_12584809","U_12585148","U_12585160","U_12585249","U_12590185","U_12590257","U_12590553","U_12591772","U_12594083","U_12596269","U_12600570","U_12602438","U_12604160","U_12604193","U_12604282","U_12604529","U_12604577","U_12604588","U_12604620","U_12604814","U_12604835","U_12604971","U_12605001","U_12605050","U_12605213","U_12605306","U_12605494","U_12605532","U_12605940","U_12606457","U_12606466","U_12606498","U_12606542","U_12606625","U_12607550","U_12607875","U_12608414","U_12608482","U_12608562","U_12611610","U_12614621","U_12614711","U_12614757","U_12615420","U_12616527","U_12616640","U_12616931","U_12619379","U_12619558","U_12619804","U_12621157","U_12621251","U_12621737","U_12623502","U_12642172","U_12642184","U_12642215","U_12642216","U_12642217","U_12642228","U_12642264","U_12642268","U_12642269","U_12642276","U_12642278","U_12642279","U_12642280","U_12642300","U_12642306","U_12642821","U_1264498","U_12647565","U_12648103","U_12648411","U_12648700","U_12648886","U_12649269","U_12649390","U_12649399","U_12649460","U_12649462","U_12649563","U_12649614","U_12649699","U_12649701","U_12649806","U_12649814","U_12650372","U_12650480","U_12650733","U_12651044","U_12651699","U_12651754","U_12651974","U_12653017","U_12653317","U_12653406","U_12653428","U_12654360","U_12654932","U_12655670","U_12656438","U_1265693","U_12656934","U_12657043","U_12657215","U_12658503","U_12658700","U_12658734","U_12659383","U_12659659","U_12659971","U_12660826","U_12660827","U_12660829","U_12660831","U_12660832","U_12660835","U_12660837","U_12660839","U_12660840","U_12660845","U_12660850","U_12660855","U_12660859","U_12660871","U_12660876","U_12660894","U_12661030","U_12661042","U_12661048","U_12661054","U_12661065","U_12661125","U_12661198","U_12661265","U_12661289","U_12661293","U_12661302","U_12661397","U_12661412","U_12661680","U_12662227","U_12662332","U_12662452","U_12662454","U_12662505","U_12662596","U_12662673","U_12662796","U_1266437","U_12665303","U_12665366","U_12667347","U_12667455"]

pc_api_key = '79e04bc1-ae29-4c21-83c1-8cbe418ae013'

# neo4j = Neo4j_API(username='neo4j',password='')
# pc_user = PineconeClient(index_name="cke-user",api_key=pc_api_key)

item_list_file_path = 'item_list.txt'

embeddings = np.load('cke_embeddings_copy.npz')

import csv
user_embeddings= embeddings['user_embeddings']
items_embeddings = embeddings['item_embeddings']

with open('user_embeddings.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    for embedding in user_embeddings:
        writer.writerow(embedding)


def get_resources_by_user(user_id):
    query = """
        MATCH (u:User)-[w:WATCHED]->(r:Resource)
        WHERE u.user_id = $user
        RETURN u.user_id as user_id, w.local_start_times[-1] as time, r.resource_id as resource_id
    """

    params = {
        'user': user_id
    }

    df_result = neo4j.run_query(query, params)

    if df_result is not False:
        # Group by user_id and sort by time
        grouped = df_result.groupby('user_id').apply(
            lambda x: x.sort_values('time')['resource_id'].tolist()
        ).to_dict()
        return grouped
    else:
        return []


def get_top_similar_users(target_user,target_user_embedding,k=20):

    most_similar_users = pc_user.query_result(target_user_embedding,k=k)

    most_similar_users_id = [user['id'] for user in most_similar_users]

    if target_user not in most_similar_users_id:
        most_similar_users_id.append(target_user)

    return most_similar_users_id



def get_resources_many_users(users):
    query = """
        MATCH (u:User)-[w:WATCHED]->(r:Resource)
        WHERE u.user_id IN $users
        RETURN u.user_id as user_id, w.local_start_times[-1] as time, r.resource_id as resource_id
    """

    params = {
        'users': users
    }

    df_result = neo4j.run_query(query, params)
    
    if df_result is not False:
        # Group by user_id and sort by time
        grouped = df_result.groupby('user_id').apply(
            lambda x: x.sort_values('time')['resource_id'].tolist()
        ).to_dict()
        return grouped
    else:
        return {user: [] for user in users}

def generate_similar_users_resources(target_user):

    most_similar_users = get_top_similar_users(target_user)

    users_resources = get_resources_many_users(most_similar_users)


    return users_resources



def check_len_resources(target_user, user_sequences):

    satisfied_users = {}

    for user,sequences in user_sequences.items():

        if (user == target_user or len(sequences)>len(user_sequences[target_user])) and user not in satisfied_users:
            satisfied_users[user] = sequences

    return satisfied_users

def get_subsequences(sequence):
    subsequences = []
    for start in range(len(sequence)):
        for end in range(start + 1, len(sequence) + 1):
            subsequences.append(sequence[start:end])
    return subsequences

def filter_subsequences(subsequences, min_length=2):
    return [subseq for subseq in subsequences if len(subseq) >= min_length]

def get_satisfied_users(target_user,user_sequences):

    # user_sequences = check_len_resources(target_user,user_sequences)

    print(list(user_sequences.keys()))
    
    if len(user_sequences[target_user]) > 1:
        ui_subsequences = [user_sequences[target_user][i:] for i in range(len(user_sequences[target_user]))]
    else:
        ui_subsequences = [user_sequences[target_user]]
    if ui_subsequences:
        ui_subsequences = sorted(ui_subsequences, key=len, reverse=True)
    else:
        return []
    # ui_subsequences = [user_sequences[target_user]]
    # print(ui_subsequences)    

    grouped_ui_subsequences = defaultdict(list)
    for subseq in ui_subsequences:
        grouped_ui_subsequences[len(subseq)].append(subseq)

    uj_results = {}
    for uj_id,sequence in user_sequences.items():

        if uj_id == target_user or uj_id == 'U_1009248':
            continue
        # if len(ui_subsequences)>1: 
        #     uj_subsequences = filter_subsequences(get_subsequences(sequence),min_length=1)
        # else:
        #     uj_subsequences = filter_subsequences(get_subsequences(sequence),min_length=1)
        uj_subsequences = filter_subsequences(get_subsequences(sequence),min_length=1)

        uj_results[uj_id] =  uj_subsequences

        
    satisfied_user = {}
    for length in sorted(grouped_ui_subsequences.keys(), reverse=True):
        for ui_subsequence in grouped_ui_subsequences[length]:
            for uj in uj_results.keys():
                if ui_subsequence in uj_results[uj] and uj not in satisfied_user:
                    satisfied_user[uj] = user_sequences[uj]
        if satisfied_user:
            break

    satisfied_user[target_user] = user_sequences[target_user]


    return satisfied_user
    
def get_next_items_improved(current_sequence, patterns, sequences):
    next_items = Counter()
    current_set = set(current_sequence)

    # print(f"Current sequence: {current_sequence}")

    for pattern, support in patterns:
        if len(pattern) > len(current_sequence) and pattern[:len(current_sequence)] == current_sequence:
            next_item = pattern[len(current_sequence)]
            if next_item not in current_set:
                next_items[next_item] += support
                # print(f"Adding {next_item} from pattern {pattern} with support {support}")

    for sequence in sequences:
        if len(sequence) > len(current_sequence) and sequence[:len(current_sequence)] == current_sequence:
            next_item = sequence[len(current_sequence)]
            if next_item not in current_set:
                next_items[next_item] += 1
                # print(f"Adding {next_item} from direct sequence {sequence}")

    if not next_items and current_sequence:
        print("No direct next items found, looking for items after last watched")
        last_watched = current_sequence[-1]
        for sequence in sequences:
            if last_watched in sequence:
                idx = sequence.index(last_watched)
                if idx + 1 < len(sequence):
                    next_item = sequence[idx + 1]
                    next_items[next_item] += 1

    return next_items


def recommend_next_video_improved(target_user, user_videos, target_sequence, top_similar_users, min_support=1, k=3, flag=1):
    recommended_videos = []

    def contains_subsequence(sequence, subsequence):
        it = iter(sequence)
        return all(item in it for item in subsequence)

    while True:
        old_length = len(recommended_videos)
        similar_sequences = [
            tuple(user_videos[user]) for user in top_similar_users 
            if user != target_user and any(contains_subsequence(user_videos[user], target_sequence[i:]) for i in range(len(target_sequence)))
        ]

        print(f"Similar Sequences: {similar_sequences}")
        
        # Filter and truncate similar sequences to include only those containing the target subsequences
        filtered_sequences = []
        if flag == 1:
            max_length = 5  # Set a maximum length for the truncated sequences
        elif flag == 2:
            max_length = 10
        else:
            max_length = 15
        for seq in similar_sequences:
            for i in range(len(seq)):
                if contains_subsequence(seq[i:], target_sequence):
                    truncated_seq = seq[i:i+max_length]
                    filtered_sequences.append(truncated_seq)
                    break

        print(f"Filtered and Truncated Sequences: {filtered_sequences}")
        
        patterns = seqmining.freq_seq_enum(filtered_sequences, min_support)
        print("Frequent patterns:", list(patterns))

        next_items = get_next_items_improved(target_sequence, patterns, similar_sequences)
        print("Next possible items (with scores):", dict(next_items))

        recommended_video = next_items.most_common(1)
        if recommended_video and recommended_video[0] not in recommended_videos:
            recommended_videos.append(recommended_video[0])
            target_sequence.append(recommended_video[0][0])
        
        if len(recommended_videos) == k or len(recommended_videos) == old_length:
            break

    return recommended_videos


def generate_new_user_embedding(new_user_interactions, item_lists, item_embeddings):
    embedding_list = []

    for interaction in new_user_interactions:

        map_id = item_lists.loc[item_lists['org_id'] == interaction, 'remap_id']


        if not map_id.empty:
            item_embedding = item_embeddings[map_id.values[0]]
            embedding_list.append(item_embedding)
        else:
            print(f'Warning: Interaction {interaction} not found in item list.')

    if not embedding_list:
        return []
    
    # Aggregate embeddings to generate new user embedding
    new_user_embedding = np.mean(embedding_list, axis=0)
    
    return new_user_embedding




def main(new_user):

    item_lists = pd.read_csv(item_list_file_path, sep='\s+', header=0)

    new_user_interactions = get_resources_by_user(new_user)[new_user]

    len_new_user_interactions = len(new_user_interactions)



    print(new_user_interactions)

    new_user_embedding = generate_new_user_embedding(
                                        new_user_interactions=new_user_interactions,
                                        item_lists=item_lists,
                                        item_embeddings=items_embeddings)

    print(new_user_embedding)
    top_similar_users=get_top_similar_users(new_user,new_user_embedding.tolist())

    print(top_similar_users)
    similar_users_videos = get_resources_many_users(top_similar_users)

    satisfied_users_videos = get_satisfied_users(new_user,similar_users_videos)

    print("Satisfied videos: ",satisfied_users_videos)
    rcm_LOs = recommend_next_video_improved(
                                        target_user=new_user,
                                        user_videos=satisfied_users_videos,
                                        target_sequence=new_user_interactions,
                                        top_similar_users=list(satisfied_users_videos.keys()),
                                        k=len_new_user_interactions-0)
    return rcm_LOs


def test(user_id,flag):
    item_lists = pd.read_csv(item_list_file_path, sep='\s+', header=0)

    
    new_user_interactions = get_resources_by_user(user_id)[user_id]
    len_new_user_interactions = len(new_user_interactions)

    if len_new_user_interactions <= 1:
        return  (None,None) 

    midpoint = len(new_user_interactions) // 2 
    train_interactions = new_user_interactions[:midpoint]
    test_interactions = new_user_interactions[midpoint:]

    new_user_embedding = generate_new_user_embedding(
        new_user_interactions=train_interactions,
        item_lists=item_lists,
        item_embeddings=items_embeddings
    )

    
    if len(new_user_embedding)>0:

        top_similar_users = get_top_similar_users(user_id, new_user_embedding.tolist())
        similar_users_videos = get_resources_many_users(top_similar_users)
        satisfied_users_videos = get_satisfied_users(user_id, similar_users_videos)
        print(satisfied_users_videos)
        rcm_LOs = recommend_next_video_improved(
            target_user=user_id,
            user_videos=satisfied_users_videos,
            target_sequence=train_interactions,
            top_similar_users=list(satisfied_users_videos.keys()),
            k=len_new_user_interactions - midpoint,
            flag=flag
        )

        recommended_resources = [lo[0] for lo in rcm_LOs]

        return recommended_resources, test_interactions
    else:
        return (None,None) 

def evaluate_recommendations(recommended_resources, test_interactions):
    if len(recommended_resources) != len(test_interactions):
        print("Recommended resources:", recommended_resources)
        print("Test interactions:", test_interactions)
        print("Length of recommended resources and test interactions are not the same")
        return (None, None)
    
    accuracy = 0
    recall_hits = set()

    # Calculate accuracy and identify hits for recall calculation
    for i, item in enumerate(recommended_resources):
        if item == test_interactions[i]:
            accuracy += 1
        if item in test_interactions:
            recall_hits.add(item)

    # Calculate accuracy@k
    accuracy_at_k = accuracy / len(test_interactions) if len(test_interactions) else 0
    
    # Calculate recall@k
    recall_at_k = len(recall_hits) / len(test_interactions) if len(test_interactions) else 0

    return accuracy_at_k, recall_at_k

def run_evaluation(sample_users,flag):

    accuracy_scores = []
    recall_scores = []

    for user_id in sample_users:
        print(f"Processing user: {user_id}")
        recommended_resources, test_interactions = test(user_id,flag=flag)

        if recommended_resources and test_interactions:
            accuracy,recall = evaluate_recommendations(recommended_resources, test_interactions)
            
            if not accuracy and not recall:
                continue
            accuracy_scores.append(accuracy)
            recall_scores.append(recall)
            print(f"User: {user_id}, Accuracy: {accuracy}, Recall: {recall}")


    avg_accuracy = sum(accuracy_scores) / len(accuracy_scores) if accuracy_scores else 0
    avg_recall = sum(recall_scores) / len(recall_scores) if recall_scores else 0

    return  avg_recall,avg_accuracy

def get_user_and_number_resources(users):

    query = """
        MATCH (u:User)-[w:WATCHED]->(r:Resource)
        WHERE u.user_id IN $users
        WITH u, count(r.resource_id) as resources
        RETURN resources, count(u.user_id) as user_count
        ORDER BY resources
    """

    params = {
        'users': users
    }

    df_result = neo4j.run_query(query, params)

    if df_result is not False:
        df_result.to_csv('users_resources_number.csv',index=False)
        # Group by user_id and sort by time
        return df_result
    else:
        return []
    
def get_users_from_group_1(users):
    query = """
        MATCH (u:User)-[w:WATCHED]->(r:Resource)
        WHERE u.user_id IN $users
        WITH u, count(r.resource_id) as resources
        WHERE resources > 1 AND resources <= 5
        RETURN u.user_id as users

    """

    params = {
        'users': users
    }

    df_result = neo4j.run_query(query, params)

    if df_result is not False:
        # Group by user_id and sort by time
        return df_result
    else:
        return []
    
def get_users_from_group_2(users):
    query = """
        MATCH (u:User)-[w:WATCHED]->(r:Resource)
        WHERE u.user_id IN $users
        WITH u, count(r.resource_id) as resources
        WHERE resources > 5 AND resources <= 10
        RETURN u.user_id as users
    """

    params = {
        'users': users
    }

    df_result = neo4j.run_query(query, params)

    if df_result is not False:
        # Group by user_id and sort by time
        return df_result
    else:
        return [] 
    
def get_users_from_group_3(users):
    query = """
        MATCH (u:User)-[w:WATCHED]->(r:Resource)
        WHERE u.user_id IN $users
        WITH u, count(r.resource_id) as resources
        WHERE resources > 10
        RETURN u.user_id as users
    """

    params = {
        'users': users
    }

    df_result = neo4j.run_query(query, params)

    if df_result is not False:
        # Group by user_id and sort by time
        return df_result
    else:
        return []

def plot_histogram(df_result):
    import matplotlib.pyplot as plt
    import seaborn as sns
    if not df_result.empty:
        # Ensure that the dataframe has the correct columns
        if 'resources' in df_result.columns and 'user_count' in df_result.columns:
            sns.histplot(df_result, x='resources', weights='user_count', bins=30, kde=False)
            plt.xlabel('Number of Resources Watched')
            plt.ylabel('Number of Users')
            plt.title('Distribution of Users by Number of Resources Watched')
            plt.show()
        else:
            print("DataFrame does not contain the expected columns.")
    else:
        print("No data to plot.")


def plot_histogram_with_percentage(df_result):
    import matplotlib.pyplot as plt
    import seaborn as sns

    if not df_result.empty:
        # Ensure that the dataframe has the correct columns
        if 'resources' in df_result.columns and 'user_count' in df_result.columns:
            # Calculate the total number of users
            total_users = df_result['user_count'].sum()
            
            # Normalize user counts to percentages
            df_result['percentage'] = (df_result['user_count'] / total_users) * 100
            
            # Plot the histogram
            sns.histplot(df_result, x='resources', weights='percentage', bins=30, kde=False)
            plt.xlabel('Number of Resources Watched')
            plt.ylabel('Percentage of Users')
            plt.title('Distribution of Users by Number of Resources Watched (as Percentage)')
            plt.show()
        else:
            print("DataFrame does not contain the expected columns.")
    else:
        print("No data to plot.")



if __name__ == '__main__':

#     sample_users = [
# "U_1002784","U_100281","U_10033817","U_1004662","U_1004670","U_1004954","U_1005254","U_1005500","U_10057731","U_1006254","U_10068981","U_10073375","U_10073419","U_1008050","U_1008642","U_1008653","U_1009173","U_1009481","U_10100704","U_10137498","U_10137508","U_10137510","U_10138438","U_10167679","U_10170061","U_10170744","U_10172329","U_10174787","U_10181205","U_10187253","U_10187261","U_10187267","U_10192575","U_10192740","U_10192777","U_10192955","U_10193096","U_10193468","U_10193984","U_10194022","U_10195298","U_10197595","U_10199145","U_1020100","U_1020293","U_10212422","U_1021609","U_1021628","U_10222631","U_10222675","U_10225349","U_1022796","U_10231045","U_10231066","U_10236096","U_10236159","U_10236189","U_1023803","U_10244776","U_10244788","U_10244811","U_10244818","U_10244931","U_10246891","U_10246958","U_10247830","U_10248516","U_10248791","U_10249738","U_10255613","U_10261732","U_10261942","U_10262024","U_10272961","U_1027395","U_10275637","U_10275641","U_10275648","U_10275656","U_10275663","U_10275672","U_10275680","U_10275685","U_10290533","U_10290902","U_10290952","U_10291424","U_10291671","U_10291924","U_10292278","U_10292660","U_10304917","U_10305912","U_10306796","U_10322104","U_10323283","U_10323297","U_10323300","U_10340055","U_10340066"    ]

    import random
    import time


    users_group_1 = get_users_from_group_1(TOP_2279_USERS)['users'].tolist()
    users_group_2 = get_users_from_group_2(TOP_2279_USERS)['users'].tolist()
    users_group_3 = get_users_from_group_3(TOP_2279_USERS)['users'].tolist()

    print(len(users_group_1))
    print(len(users_group_2))
    print(len(users_group_3))


    experiment_times = 0

    top_50_random_users_from_group_1 = []
    top_50_random_users_from_group_2 = []
    top_50_random_users_from_group_3 = []

    accuracy_group_1 = []
    recall_group_1 = []

    selected_users = []

    avg_recall_final = []
    avg_accuracy_final = []
    executed_time = []
    
    while experiment_times < 1:
        start_time = time.time()
        users_group_1 = [user for user in users_group_1 if user not in selected_users]
        
        top_50_random_users_from_group_1 = random.choices(users_group_1,k=50)
        print(f"Top 50 random: {top_50_random_users_from_group_1}")
        selected_users.append(top_50_random_users_from_group_1)
        # top_50_random_users_from_group_2 = random.choices(users_group_2,k=50)
        # top_50_random_users_from_group_3 = random.choices(users_group_3,k=50)
        
        avg_recall,avg_accuracy = run_evaluation(top_50_random_users_from_group_1,1)



        end_time = time.time()

        avg_recall_final.append(avg_recall)
        avg_accuracy_final.append(avg_accuracy)
        executed_time.append(end_time-start_time)

        print(f"AVG Recall: {avg_recall}")
        print(f"AVG Accuracy: {avg_accuracy}")
        print(f"AVG Execution Time: {end_time-start_time}")
        time.sleep(30)
        experiment_times+=1

    print("AVG Recall Final: ",sum(avg_recall_final)/len(avg_recall_final))

    print("AVG Accuracy Final: ",sum(avg_accuracy_final)/len(avg_accuracy_final))

    print("AVG Execution Time: ",sum(executed_time)/len(executed_time))


    # ks = [10,20,30,40,50]
    # # avg_precisions = []
    # # avg_recalls = []
    # avg_accuracies = []

    # for k in ks:
    #     selected_users = TOP_2279_USERS[:k]
    #     avg_accuracy = run_evaluation(selected_users)
   
    #     avg_accuracies.append(avg_accuracy)
    #     print(f"k={k}, Average Accuracy: {avg_accuracy}")

    # # Plotting
    # plt.figure(figsize=(10, 6))
    # # plt.plot(ks, avg_precisions, label='Average Precision', marker='o')
    # # plt.plot(ks, avg_recalls, label='Average Recall', marker='o')
    # plt.plot(ks, avg_accuracies, label='Average Accuracy', marker='o')
    # plt.xlabel('Number of Sample Users (k)')
    # plt.ylabel('Scores')
    # plt.title('Accuracy vs. Number of Sample Users')
    # plt.xticks(ks)  # Set the ticks for the x-axis
    # plt.legend()
    # plt.grid(True)
    # plt.show()

    




    



